{"version":3,"file":"VideoPlayerView.js","sourceRoot":"","sources":["../src/VideoPlayerView.tsx"],"names":[],"mappings":"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","sourcesContent":["import {requireNativeViewManager} from 'expo-modules-core'\nimport * as React from 'react'\nimport {StyleProp, ViewStyle, Image, View, ImageStyle} from 'react-native'\n\nimport {VideoPlayerViewProps} from './VideoPlayer.types'\n\nconst NativeView: React.ComponentType<\n  VideoPlayerViewProps & {\n    style: StyleProp<ViewStyle>\n    ref: React.Ref<any>\n  }\n> = requireNativeViewManager('VideoPlayer')\n\nexport class VideoPlayerView extends React.Component<VideoPlayerViewProps> {\n  ref: React.RefObject<any> = React.createRef()\n  state = {\n    isLoading: true,\n    isActive: false,\n    showThumbnail: false\n  }\n\n  togglePlayback = () => {\n    this.ref.current?.togglePlayback()\n  }\n\n  toggleMuted = () => {\n    this.ref.current?.toggleMuted()\n  }\n\n  enterFullscreen = (keepDisplayOn?: boolean) => {\n    this.ref.current?.enterFullscreen(keepDisplayOn ?? false)\n  }\n\n  onLoadingChange = (e: any) => {\n    const isLoading = e.nativeEvent.isLoading\n    this.setState({ \n      isLoading,\n      showThumbnail: isLoading && this.props.showThumbnailWhileLoading\n    })\n  }\n\n  onActiveChange = (e: any) => {\n    const isActive = e.nativeEvent.isActive\n    this.setState({ \n      isActive,\n      showThumbnail: !isActive && this.props.showThumbnailWhenInactive\n    })\n  }\n\n  renderThumbnail() {\n    const { thumbnailUrl, thumbnailStyle, style } = this.props\n    const { showThumbnail } = this.state\n\n    if (!showThumbnail || !thumbnailUrl) {\n      return null\n    }\n\n    return (\n      <Image\n        source={{ uri: thumbnailUrl }}\n        style={[\n          {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            resizeMode: 'cover',\n            zIndex: 1\n          },\n          thumbnailStyle,\n          style as StyleProp<ImageStyle>\n        ]}\n      />\n    )\n  }\n\n  render() {\n    const { thumbnailUrl, showThumbnailWhileLoading, showThumbnailWhenInactive, thumbnailStyle, ...props } = this.props\n\n    return (\n      <View style={[{ flex: 1 }, this.props.style]}>\n        {this.renderThumbnail()}\n        <NativeView\n          {...props}\n          style={[{ flex: 1 }, this.props.style]}\n          ref={this.ref}\n          onLoadingChange={this.onLoadingChange}\n          onActiveChange={this.onActiveChange}\n        />\n      </View>\n    )\n  }\n}\n"]}