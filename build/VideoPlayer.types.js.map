{"version":3,"file":"VideoPlayer.types.js","sourceRoot":"","sources":["../src/VideoPlayer.types.ts"],"names":[],"mappings":"","sourcesContent":["import {NativeSyntheticEvent, StyleProp, ViewStyle, ImageStyle} from 'react-native'\n\nexport type VideoPlayerViewProps = {\n  url: string\n  autoplay: boolean\n  beginMuted: boolean\n  forceTakeover?: boolean\n  accessibilityHint?: string\n  accessibilityLabel?: string\n  \n  // Proximity-based autoplay\n  enableProximityAutoplay?: boolean\n  proximityThreshold?: number\n  \n  // Thumbnail support\n  thumbnailUrl?: string\n  showThumbnailWhileLoading?: boolean\n  showThumbnailWhenInactive?: boolean\n  thumbnailStyle?: StyleProp<ImageStyle>\n\n  // Picture-in-Picture support\n  enablePictureInPicture?: boolean\n  pipDimensions?: {\n    width: number\n    height: number\n  }\n  onPictureInPictureChange?: (\n    e: NativeSyntheticEvent<{isPictureInPicture: boolean}>\n  ) => void\n\n  onActiveChange?: (e: NativeSyntheticEvent<{isActive: boolean}>) => void\n  onLoadingChange?: (e: NativeSyntheticEvent<{isLoading: boolean}>) => void\n  onMutedChange?: (e: NativeSyntheticEvent<{isMuted: boolean}>) => void\n  onPlayerPress?: () => void\n  onStatusChange?: (\n    e: NativeSyntheticEvent<{status: 'playing' | 'paused'}>\n  ) => void\n  onTimeRemainingChange?: (\n    e: NativeSyntheticEvent<{timeRemaining: number}>\n  ) => void\n  onFullscreenChange?: (\n    e: NativeSyntheticEvent<{isFullscreen: boolean}>\n  ) => void\n  onError?: (e: NativeSyntheticEvent<{error: string}>) => void\n  style?: StyleProp<ViewStyle>\n}\n"]}